#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from lesedi.sdk import Service
from lesedi.sdk.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  Status get_status()')
    print('  void stop()')
    print('  void reset()')
    print('  void startup()')
    print('  void shutdown()')
    print('  void auto_on()')
    print('  void auto_off()')
    print('  void park()')
    print('  void unpark()')
    print('  void goto_altaz(double alt, double az)')
    print('  void goto_radec(double ra, double dec)')
    print('  void set_tracking_mode(i32 tracking, i32 track_type, double ra_rate, double dec_rate)')
    print('  void abort()')
    print('  void move(Direction direction, double arcsec)')
    print('  void select_instrument(Instrument instrument)')
    print('  void dome_remote_enable()')
    print('  void dome_remote_disable()')
    print('  void park_dome()')
    print('  void stop_dome()')
    print('  void dome_follow_telescope_start()')
    print('  void dome_follow_telescope_stop()')
    print('  void rotate_dome(double az)')
    print('  void open_dome()')
    print('  void close_dome()')
    print('  void dome_lights_on()')
    print('  void dome_lights_off()')
    print('  void slew_lights_on()')
    print('  void slew_lights_off()')
    print('  void open_covers()')
    print('  void close_covers()')
    print('  void rotator_tracking_on()')
    print('  void rotator_tracking_off()')
    print('  void rotator_auto_on()')
    print('  void rotator_auto_off()')
    print('  void secondary_mirror_stop()')
    print('  void secondary_mirror_auto_on()')
    print('  void secondary_mirror_auto_off()')
    print('  void tertiary_mirror_auto_on()')
    print('  void tertiary_mirror_auto_off()')
    print('  void set_focus(double inches)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = Service.Client(protocol)
transport.open()

if cmd == 'get_status':
    if len(args) != 0:
        print('get_status requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_status())

elif cmd == 'stop':
    if len(args) != 0:
        print('stop requires 0 args')
        sys.exit(1)
    pp.pprint(client.stop())

elif cmd == 'reset':
    if len(args) != 0:
        print('reset requires 0 args')
        sys.exit(1)
    pp.pprint(client.reset())

elif cmd == 'startup':
    if len(args) != 0:
        print('startup requires 0 args')
        sys.exit(1)
    pp.pprint(client.startup())

elif cmd == 'shutdown':
    if len(args) != 0:
        print('shutdown requires 0 args')
        sys.exit(1)
    pp.pprint(client.shutdown())

elif cmd == 'auto_on':
    if len(args) != 0:
        print('auto_on requires 0 args')
        sys.exit(1)
    pp.pprint(client.auto_on())

elif cmd == 'auto_off':
    if len(args) != 0:
        print('auto_off requires 0 args')
        sys.exit(1)
    pp.pprint(client.auto_off())

elif cmd == 'park':
    if len(args) != 0:
        print('park requires 0 args')
        sys.exit(1)
    pp.pprint(client.park())

elif cmd == 'unpark':
    if len(args) != 0:
        print('unpark requires 0 args')
        sys.exit(1)
    pp.pprint(client.unpark())

elif cmd == 'goto_altaz':
    if len(args) != 2:
        print('goto_altaz requires 2 args')
        sys.exit(1)
    pp.pprint(client.goto_altaz(eval(args[0]), eval(args[1]),))

elif cmd == 'goto_radec':
    if len(args) != 2:
        print('goto_radec requires 2 args')
        sys.exit(1)
    pp.pprint(client.goto_radec(eval(args[0]), eval(args[1]),))

elif cmd == 'set_tracking_mode':
    if len(args) != 4:
        print('set_tracking_mode requires 4 args')
        sys.exit(1)
    pp.pprint(client.set_tracking_mode(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'abort':
    if len(args) != 0:
        print('abort requires 0 args')
        sys.exit(1)
    pp.pprint(client.abort())

elif cmd == 'move':
    if len(args) != 2:
        print('move requires 2 args')
        sys.exit(1)
    pp.pprint(client.move(eval(args[0]), eval(args[1]),))

elif cmd == 'select_instrument':
    if len(args) != 1:
        print('select_instrument requires 1 args')
        sys.exit(1)
    pp.pprint(client.select_instrument(eval(args[0]),))

elif cmd == 'dome_remote_enable':
    if len(args) != 0:
        print('dome_remote_enable requires 0 args')
        sys.exit(1)
    pp.pprint(client.dome_remote_enable())

elif cmd == 'dome_remote_disable':
    if len(args) != 0:
        print('dome_remote_disable requires 0 args')
        sys.exit(1)
    pp.pprint(client.dome_remote_disable())

elif cmd == 'park_dome':
    if len(args) != 0:
        print('park_dome requires 0 args')
        sys.exit(1)
    pp.pprint(client.park_dome())

elif cmd == 'stop_dome':
    if len(args) != 0:
        print('stop_dome requires 0 args')
        sys.exit(1)
    pp.pprint(client.stop_dome())

elif cmd == 'dome_follow_telescope_start':
    if len(args) != 0:
        print('dome_follow_telescope_start requires 0 args')
        sys.exit(1)
    pp.pprint(client.dome_follow_telescope_start())

elif cmd == 'dome_follow_telescope_stop':
    if len(args) != 0:
        print('dome_follow_telescope_stop requires 0 args')
        sys.exit(1)
    pp.pprint(client.dome_follow_telescope_stop())

elif cmd == 'rotate_dome':
    if len(args) != 1:
        print('rotate_dome requires 1 args')
        sys.exit(1)
    pp.pprint(client.rotate_dome(eval(args[0]),))

elif cmd == 'open_dome':
    if len(args) != 0:
        print('open_dome requires 0 args')
        sys.exit(1)
    pp.pprint(client.open_dome())

elif cmd == 'close_dome':
    if len(args) != 0:
        print('close_dome requires 0 args')
        sys.exit(1)
    pp.pprint(client.close_dome())

elif cmd == 'dome_lights_on':
    if len(args) != 0:
        print('dome_lights_on requires 0 args')
        sys.exit(1)
    pp.pprint(client.dome_lights_on())

elif cmd == 'dome_lights_off':
    if len(args) != 0:
        print('dome_lights_off requires 0 args')
        sys.exit(1)
    pp.pprint(client.dome_lights_off())

elif cmd == 'slew_lights_on':
    if len(args) != 0:
        print('slew_lights_on requires 0 args')
        sys.exit(1)
    pp.pprint(client.slew_lights_on())

elif cmd == 'slew_lights_off':
    if len(args) != 0:
        print('slew_lights_off requires 0 args')
        sys.exit(1)
    pp.pprint(client.slew_lights_off())

elif cmd == 'open_covers':
    if len(args) != 0:
        print('open_covers requires 0 args')
        sys.exit(1)
    pp.pprint(client.open_covers())

elif cmd == 'close_covers':
    if len(args) != 0:
        print('close_covers requires 0 args')
        sys.exit(1)
    pp.pprint(client.close_covers())

elif cmd == 'rotator_tracking_on':
    if len(args) != 0:
        print('rotator_tracking_on requires 0 args')
        sys.exit(1)
    pp.pprint(client.rotator_tracking_on())

elif cmd == 'rotator_tracking_off':
    if len(args) != 0:
        print('rotator_tracking_off requires 0 args')
        sys.exit(1)
    pp.pprint(client.rotator_tracking_off())

elif cmd == 'rotator_auto_on':
    if len(args) != 0:
        print('rotator_auto_on requires 0 args')
        sys.exit(1)
    pp.pprint(client.rotator_auto_on())

elif cmd == 'rotator_auto_off':
    if len(args) != 0:
        print('rotator_auto_off requires 0 args')
        sys.exit(1)
    pp.pprint(client.rotator_auto_off())

elif cmd == 'secondary_mirror_stop':
    if len(args) != 0:
        print('secondary_mirror_stop requires 0 args')
        sys.exit(1)
    pp.pprint(client.secondary_mirror_stop())

elif cmd == 'secondary_mirror_auto_on':
    if len(args) != 0:
        print('secondary_mirror_auto_on requires 0 args')
        sys.exit(1)
    pp.pprint(client.secondary_mirror_auto_on())

elif cmd == 'secondary_mirror_auto_off':
    if len(args) != 0:
        print('secondary_mirror_auto_off requires 0 args')
        sys.exit(1)
    pp.pprint(client.secondary_mirror_auto_off())

elif cmd == 'tertiary_mirror_auto_on':
    if len(args) != 0:
        print('tertiary_mirror_auto_on requires 0 args')
        sys.exit(1)
    pp.pprint(client.tertiary_mirror_auto_on())

elif cmd == 'tertiary_mirror_auto_off':
    if len(args) != 0:
        print('tertiary_mirror_auto_off requires 0 args')
        sys.exit(1)
    pp.pprint(client.tertiary_mirror_auto_off())

elif cmd == 'set_focus':
    if len(args) != 1:
        print('set_focus requires 1 args')
        sys.exit(1)
    pp.pprint(client.set_focus(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
