#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class State(object):
    OFF = 0
    STARTUP = 1
    READY = 2
    SHUTDOWN = 3

    _VALUES_TO_NAMES = {
        0: "OFF",
        1: "STARTUP",
        2: "READY",
        3: "SHUTDOWN",
    }

    _NAMES_TO_VALUES = {
        "OFF": 0,
        "STARTUP": 1,
        "READY": 2,
        "SHUTDOWN": 3,
    }


class Instrument(object):
    SHOC = 1
    WINCAM = 2

    _VALUES_TO_NAMES = {
        1: "SHOC",
        2: "WINCAM",
    }

    _NAMES_TO_VALUES = {
        "SHOC": 1,
        "WINCAM": 2,
    }


class TrackType(object):
    SIDEREAL = 0
    NONSIDEREAL = 1

    _VALUES_TO_NAMES = {
        0: "SIDEREAL",
        1: "NONSIDEREAL",
    }

    _NAMES_TO_VALUES = {
        "SIDEREAL": 0,
        "NONSIDEREAL": 1,
    }


class Direction(object):
    NORTH = 0
    SOUTH = 1
    EAST = 2
    WEST = 3

    _VALUES_TO_NAMES = {
        0: "NORTH",
        1: "SOUTH",
        2: "EAST",
        3: "WEST",
    }

    _NAMES_TO_VALUES = {
        "NORTH": 0,
        "SOUTH": 1,
        "EAST": 2,
        "WEST": 3,
    }


class LesediException(TException):
    """
    Attributes:
     - message

    """


    def __init__(self, message=None,):
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LesediException')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FitsInfoType(object):
    """
    Attributes:
     - key
     - val
     - comment

    """


    def __init__(self, key=None, val=None, comment=None,):
        self.key = key
        self.val = val
        self.comment = comment

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.key = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.val = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.comment = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FitsInfoType')
        if self.key is not None:
            oprot.writeFieldBegin('key', TType.STRING, 1)
            oprot.writeString(self.key.encode('utf-8') if sys.version_info[0] == 2 else self.key)
            oprot.writeFieldEnd()
        if self.val is not None:
            oprot.writeFieldBegin('val', TType.STRING, 2)
            oprot.writeString(self.val.encode('utf-8') if sys.version_info[0] == 2 else self.val)
            oprot.writeFieldEnd()
        if self.comment is not None:
            oprot.writeFieldBegin('comment', TType.STRING, 3)
            oprot.writeString(self.comment.encode('utf-8') if sys.version_info[0] == 2 else self.comment)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Location(object):
    """
    Attributes:
     - latitude
     - longitude
     - elevation

    """


    def __init__(self, latitude=None, longitude=None, elevation=None,):
        self.latitude = latitude
        self.longitude = longitude
        self.elevation = elevation

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.latitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.longitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.elevation = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Location')
        if self.latitude is not None:
            oprot.writeFieldBegin('latitude', TType.DOUBLE, 1)
            oprot.writeDouble(self.latitude)
            oprot.writeFieldEnd()
        if self.longitude is not None:
            oprot.writeFieldBegin('longitude', TType.DOUBLE, 2)
            oprot.writeDouble(self.longitude)
            oprot.writeFieldEnd()
        if self.elevation is not None:
            oprot.writeFieldBegin('elevation', TType.DOUBLE, 3)
            oprot.writeDouble(self.elevation)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TelescopeStatus(object):
    """
    Attributes:
     - initialized
     - tracking
     - slewing
     - parking
     - parked
     - pointing_east
     - manual
     - communication_fault
     - limit_switch_primary_plus
     - limit_switch_primary_minus
     - limit_switch_secondary_plus
     - limit_switch_secondary_minus
     - homing_switch_primary_axis
     - homing_switch_secondary_axis
     - goto_commanded_rotator_position
     - non_sidereal_tracking
     - ra
     - dec
     - alt
     - az
     - secondary_axis_angle
     - primary_axis_angle
     - sidereal_time
     - julian_date
     - time
     - airmass
     - location

    """


    def __init__(self, initialized=None, tracking=None, slewing=None, parking=None, parked=None, pointing_east=None, manual=None, communication_fault=None, limit_switch_primary_plus=None, limit_switch_primary_minus=None, limit_switch_secondary_plus=None, limit_switch_secondary_minus=None, homing_switch_primary_axis=None, homing_switch_secondary_axis=None, goto_commanded_rotator_position=None, non_sidereal_tracking=None, ra=None, dec=None, alt=None, az=None, secondary_axis_angle=None, primary_axis_angle=None, sidereal_time=None, julian_date=None, time=None, airmass=None, location=None,):
        self.initialized = initialized
        self.tracking = tracking
        self.slewing = slewing
        self.parking = parking
        self.parked = parked
        self.pointing_east = pointing_east
        self.manual = manual
        self.communication_fault = communication_fault
        self.limit_switch_primary_plus = limit_switch_primary_plus
        self.limit_switch_primary_minus = limit_switch_primary_minus
        self.limit_switch_secondary_plus = limit_switch_secondary_plus
        self.limit_switch_secondary_minus = limit_switch_secondary_minus
        self.homing_switch_primary_axis = homing_switch_primary_axis
        self.homing_switch_secondary_axis = homing_switch_secondary_axis
        self.goto_commanded_rotator_position = goto_commanded_rotator_position
        self.non_sidereal_tracking = non_sidereal_tracking
        self.ra = ra
        self.dec = dec
        self.alt = alt
        self.az = az
        self.secondary_axis_angle = secondary_axis_angle
        self.primary_axis_angle = primary_axis_angle
        self.sidereal_time = sidereal_time
        self.julian_date = julian_date
        self.time = time
        self.airmass = airmass
        self.location = location

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.initialized = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.tracking = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.slewing = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.parking = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.parked = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.pointing_east = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.manual = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.communication_fault = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.limit_switch_primary_plus = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.BOOL:
                    self.limit_switch_primary_minus = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.BOOL:
                    self.limit_switch_secondary_plus = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.BOOL:
                    self.limit_switch_secondary_minus = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.BOOL:
                    self.homing_switch_primary_axis = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.BOOL:
                    self.homing_switch_secondary_axis = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.BOOL:
                    self.goto_commanded_rotator_position = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.BOOL:
                    self.non_sidereal_tracking = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.DOUBLE:
                    self.ra = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.DOUBLE:
                    self.dec = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.DOUBLE:
                    self.alt = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.DOUBLE:
                    self.az = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.DOUBLE:
                    self.secondary_axis_angle = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.DOUBLE:
                    self.primary_axis_angle = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.DOUBLE:
                    self.sidereal_time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.DOUBLE:
                    self.julian_date = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.DOUBLE:
                    self.time = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.DOUBLE:
                    self.airmass = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.STRUCT:
                    self.location = Location()
                    self.location.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TelescopeStatus')
        if self.initialized is not None:
            oprot.writeFieldBegin('initialized', TType.BOOL, 1)
            oprot.writeBool(self.initialized)
            oprot.writeFieldEnd()
        if self.tracking is not None:
            oprot.writeFieldBegin('tracking', TType.BOOL, 2)
            oprot.writeBool(self.tracking)
            oprot.writeFieldEnd()
        if self.slewing is not None:
            oprot.writeFieldBegin('slewing', TType.BOOL, 3)
            oprot.writeBool(self.slewing)
            oprot.writeFieldEnd()
        if self.parking is not None:
            oprot.writeFieldBegin('parking', TType.BOOL, 4)
            oprot.writeBool(self.parking)
            oprot.writeFieldEnd()
        if self.parked is not None:
            oprot.writeFieldBegin('parked', TType.BOOL, 5)
            oprot.writeBool(self.parked)
            oprot.writeFieldEnd()
        if self.pointing_east is not None:
            oprot.writeFieldBegin('pointing_east', TType.BOOL, 6)
            oprot.writeBool(self.pointing_east)
            oprot.writeFieldEnd()
        if self.manual is not None:
            oprot.writeFieldBegin('manual', TType.BOOL, 7)
            oprot.writeBool(self.manual)
            oprot.writeFieldEnd()
        if self.communication_fault is not None:
            oprot.writeFieldBegin('communication_fault', TType.BOOL, 8)
            oprot.writeBool(self.communication_fault)
            oprot.writeFieldEnd()
        if self.limit_switch_primary_plus is not None:
            oprot.writeFieldBegin('limit_switch_primary_plus', TType.BOOL, 9)
            oprot.writeBool(self.limit_switch_primary_plus)
            oprot.writeFieldEnd()
        if self.limit_switch_primary_minus is not None:
            oprot.writeFieldBegin('limit_switch_primary_minus', TType.BOOL, 10)
            oprot.writeBool(self.limit_switch_primary_minus)
            oprot.writeFieldEnd()
        if self.limit_switch_secondary_plus is not None:
            oprot.writeFieldBegin('limit_switch_secondary_plus', TType.BOOL, 11)
            oprot.writeBool(self.limit_switch_secondary_plus)
            oprot.writeFieldEnd()
        if self.limit_switch_secondary_minus is not None:
            oprot.writeFieldBegin('limit_switch_secondary_minus', TType.BOOL, 12)
            oprot.writeBool(self.limit_switch_secondary_minus)
            oprot.writeFieldEnd()
        if self.homing_switch_primary_axis is not None:
            oprot.writeFieldBegin('homing_switch_primary_axis', TType.BOOL, 13)
            oprot.writeBool(self.homing_switch_primary_axis)
            oprot.writeFieldEnd()
        if self.homing_switch_secondary_axis is not None:
            oprot.writeFieldBegin('homing_switch_secondary_axis', TType.BOOL, 14)
            oprot.writeBool(self.homing_switch_secondary_axis)
            oprot.writeFieldEnd()
        if self.goto_commanded_rotator_position is not None:
            oprot.writeFieldBegin('goto_commanded_rotator_position', TType.BOOL, 15)
            oprot.writeBool(self.goto_commanded_rotator_position)
            oprot.writeFieldEnd()
        if self.non_sidereal_tracking is not None:
            oprot.writeFieldBegin('non_sidereal_tracking', TType.BOOL, 16)
            oprot.writeBool(self.non_sidereal_tracking)
            oprot.writeFieldEnd()
        if self.ra is not None:
            oprot.writeFieldBegin('ra', TType.DOUBLE, 17)
            oprot.writeDouble(self.ra)
            oprot.writeFieldEnd()
        if self.dec is not None:
            oprot.writeFieldBegin('dec', TType.DOUBLE, 18)
            oprot.writeDouble(self.dec)
            oprot.writeFieldEnd()
        if self.alt is not None:
            oprot.writeFieldBegin('alt', TType.DOUBLE, 19)
            oprot.writeDouble(self.alt)
            oprot.writeFieldEnd()
        if self.az is not None:
            oprot.writeFieldBegin('az', TType.DOUBLE, 20)
            oprot.writeDouble(self.az)
            oprot.writeFieldEnd()
        if self.secondary_axis_angle is not None:
            oprot.writeFieldBegin('secondary_axis_angle', TType.DOUBLE, 21)
            oprot.writeDouble(self.secondary_axis_angle)
            oprot.writeFieldEnd()
        if self.primary_axis_angle is not None:
            oprot.writeFieldBegin('primary_axis_angle', TType.DOUBLE, 22)
            oprot.writeDouble(self.primary_axis_angle)
            oprot.writeFieldEnd()
        if self.sidereal_time is not None:
            oprot.writeFieldBegin('sidereal_time', TType.DOUBLE, 23)
            oprot.writeDouble(self.sidereal_time)
            oprot.writeFieldEnd()
        if self.julian_date is not None:
            oprot.writeFieldBegin('julian_date', TType.DOUBLE, 24)
            oprot.writeDouble(self.julian_date)
            oprot.writeFieldEnd()
        if self.time is not None:
            oprot.writeFieldBegin('time', TType.DOUBLE, 25)
            oprot.writeDouble(self.time)
            oprot.writeFieldEnd()
        if self.airmass is not None:
            oprot.writeFieldBegin('airmass', TType.DOUBLE, 26)
            oprot.writeDouble(self.airmass)
            oprot.writeFieldEnd()
        if self.location is not None:
            oprot.writeFieldBegin('location', TType.STRUCT, 27)
            self.location.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DomeStatus(object):
    """
    Attributes:
     - shutter_closed
     - shutter_opened
     - shutter_motor_on
     - shutter_fault
     - moving
     - rotation_fault
     - lights_on
     - lights_manual
     - shutter_opening_manually
     - shutter_closing_manually
     - moving_right_manually
     - moving_left_manually
     - shutter_power
     - power
     - remote
     - is_raining
     - tcs_locked_out
     - emergency_stop
     - shutter_closed_rain
     - power_failure
     - shutter_closed_power_failure
     - watchdog_tripped
     - no_comms_with_servocontroller
     - no_comms_with_sitechexe
     - no_comms_with_plc
     - at_position_setpoint
     - following
     - driver_moving
     - shutter_moving
     - slew_lights_on
     - dome_lights_on
     - position

    """


    def __init__(self, shutter_closed=None, shutter_opened=None, shutter_motor_on=None, shutter_fault=None, moving=None, rotation_fault=None, lights_on=None, lights_manual=None, shutter_opening_manually=None, shutter_closing_manually=None, moving_right_manually=None, moving_left_manually=None, shutter_power=None, power=None, remote=None, is_raining=None, tcs_locked_out=None, emergency_stop=None, shutter_closed_rain=None, power_failure=None, shutter_closed_power_failure=None, watchdog_tripped=None, no_comms_with_servocontroller=None, no_comms_with_sitechexe=None, no_comms_with_plc=None, at_position_setpoint=None, following=None, driver_moving=None, shutter_moving=None, slew_lights_on=None, dome_lights_on=None, position=None,):
        self.shutter_closed = shutter_closed
        self.shutter_opened = shutter_opened
        self.shutter_motor_on = shutter_motor_on
        self.shutter_fault = shutter_fault
        self.moving = moving
        self.rotation_fault = rotation_fault
        self.lights_on = lights_on
        self.lights_manual = lights_manual
        self.shutter_opening_manually = shutter_opening_manually
        self.shutter_closing_manually = shutter_closing_manually
        self.moving_right_manually = moving_right_manually
        self.moving_left_manually = moving_left_manually
        self.shutter_power = shutter_power
        self.power = power
        self.remote = remote
        self.is_raining = is_raining
        self.tcs_locked_out = tcs_locked_out
        self.emergency_stop = emergency_stop
        self.shutter_closed_rain = shutter_closed_rain
        self.power_failure = power_failure
        self.shutter_closed_power_failure = shutter_closed_power_failure
        self.watchdog_tripped = watchdog_tripped
        self.no_comms_with_servocontroller = no_comms_with_servocontroller
        self.no_comms_with_sitechexe = no_comms_with_sitechexe
        self.no_comms_with_plc = no_comms_with_plc
        self.at_position_setpoint = at_position_setpoint
        self.following = following
        self.driver_moving = driver_moving
        self.shutter_moving = shutter_moving
        self.slew_lights_on = slew_lights_on
        self.dome_lights_on = dome_lights_on
        self.position = position

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.shutter_closed = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.shutter_opened = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.shutter_motor_on = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.shutter_fault = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.moving = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.rotation_fault = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.lights_on = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.lights_manual = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.shutter_opening_manually = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.BOOL:
                    self.shutter_closing_manually = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.BOOL:
                    self.moving_right_manually = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.BOOL:
                    self.moving_left_manually = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.BOOL:
                    self.shutter_power = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.BOOL:
                    self.power = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.BOOL:
                    self.remote = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.BOOL:
                    self.is_raining = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.BOOL:
                    self.tcs_locked_out = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.BOOL:
                    self.emergency_stop = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.BOOL:
                    self.shutter_closed_rain = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.BOOL:
                    self.power_failure = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.BOOL:
                    self.shutter_closed_power_failure = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.BOOL:
                    self.watchdog_tripped = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.BOOL:
                    self.no_comms_with_servocontroller = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.BOOL:
                    self.no_comms_with_sitechexe = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.BOOL:
                    self.no_comms_with_plc = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.BOOL:
                    self.at_position_setpoint = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.BOOL:
                    self.following = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.BOOL:
                    self.driver_moving = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.BOOL:
                    self.shutter_moving = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.BOOL:
                    self.slew_lights_on = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.BOOL:
                    self.dome_lights_on = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.DOUBLE:
                    self.position = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DomeStatus')
        if self.shutter_closed is not None:
            oprot.writeFieldBegin('shutter_closed', TType.BOOL, 1)
            oprot.writeBool(self.shutter_closed)
            oprot.writeFieldEnd()
        if self.shutter_opened is not None:
            oprot.writeFieldBegin('shutter_opened', TType.BOOL, 2)
            oprot.writeBool(self.shutter_opened)
            oprot.writeFieldEnd()
        if self.shutter_motor_on is not None:
            oprot.writeFieldBegin('shutter_motor_on', TType.BOOL, 3)
            oprot.writeBool(self.shutter_motor_on)
            oprot.writeFieldEnd()
        if self.shutter_fault is not None:
            oprot.writeFieldBegin('shutter_fault', TType.BOOL, 4)
            oprot.writeBool(self.shutter_fault)
            oprot.writeFieldEnd()
        if self.moving is not None:
            oprot.writeFieldBegin('moving', TType.BOOL, 5)
            oprot.writeBool(self.moving)
            oprot.writeFieldEnd()
        if self.rotation_fault is not None:
            oprot.writeFieldBegin('rotation_fault', TType.BOOL, 6)
            oprot.writeBool(self.rotation_fault)
            oprot.writeFieldEnd()
        if self.lights_on is not None:
            oprot.writeFieldBegin('lights_on', TType.BOOL, 7)
            oprot.writeBool(self.lights_on)
            oprot.writeFieldEnd()
        if self.lights_manual is not None:
            oprot.writeFieldBegin('lights_manual', TType.BOOL, 8)
            oprot.writeBool(self.lights_manual)
            oprot.writeFieldEnd()
        if self.shutter_opening_manually is not None:
            oprot.writeFieldBegin('shutter_opening_manually', TType.BOOL, 9)
            oprot.writeBool(self.shutter_opening_manually)
            oprot.writeFieldEnd()
        if self.shutter_closing_manually is not None:
            oprot.writeFieldBegin('shutter_closing_manually', TType.BOOL, 10)
            oprot.writeBool(self.shutter_closing_manually)
            oprot.writeFieldEnd()
        if self.moving_right_manually is not None:
            oprot.writeFieldBegin('moving_right_manually', TType.BOOL, 11)
            oprot.writeBool(self.moving_right_manually)
            oprot.writeFieldEnd()
        if self.moving_left_manually is not None:
            oprot.writeFieldBegin('moving_left_manually', TType.BOOL, 12)
            oprot.writeBool(self.moving_left_manually)
            oprot.writeFieldEnd()
        if self.shutter_power is not None:
            oprot.writeFieldBegin('shutter_power', TType.BOOL, 13)
            oprot.writeBool(self.shutter_power)
            oprot.writeFieldEnd()
        if self.power is not None:
            oprot.writeFieldBegin('power', TType.BOOL, 14)
            oprot.writeBool(self.power)
            oprot.writeFieldEnd()
        if self.remote is not None:
            oprot.writeFieldBegin('remote', TType.BOOL, 15)
            oprot.writeBool(self.remote)
            oprot.writeFieldEnd()
        if self.is_raining is not None:
            oprot.writeFieldBegin('is_raining', TType.BOOL, 16)
            oprot.writeBool(self.is_raining)
            oprot.writeFieldEnd()
        if self.tcs_locked_out is not None:
            oprot.writeFieldBegin('tcs_locked_out', TType.BOOL, 17)
            oprot.writeBool(self.tcs_locked_out)
            oprot.writeFieldEnd()
        if self.emergency_stop is not None:
            oprot.writeFieldBegin('emergency_stop', TType.BOOL, 18)
            oprot.writeBool(self.emergency_stop)
            oprot.writeFieldEnd()
        if self.shutter_closed_rain is not None:
            oprot.writeFieldBegin('shutter_closed_rain', TType.BOOL, 19)
            oprot.writeBool(self.shutter_closed_rain)
            oprot.writeFieldEnd()
        if self.power_failure is not None:
            oprot.writeFieldBegin('power_failure', TType.BOOL, 20)
            oprot.writeBool(self.power_failure)
            oprot.writeFieldEnd()
        if self.shutter_closed_power_failure is not None:
            oprot.writeFieldBegin('shutter_closed_power_failure', TType.BOOL, 21)
            oprot.writeBool(self.shutter_closed_power_failure)
            oprot.writeFieldEnd()
        if self.watchdog_tripped is not None:
            oprot.writeFieldBegin('watchdog_tripped', TType.BOOL, 22)
            oprot.writeBool(self.watchdog_tripped)
            oprot.writeFieldEnd()
        if self.no_comms_with_servocontroller is not None:
            oprot.writeFieldBegin('no_comms_with_servocontroller', TType.BOOL, 23)
            oprot.writeBool(self.no_comms_with_servocontroller)
            oprot.writeFieldEnd()
        if self.no_comms_with_sitechexe is not None:
            oprot.writeFieldBegin('no_comms_with_sitechexe', TType.BOOL, 24)
            oprot.writeBool(self.no_comms_with_sitechexe)
            oprot.writeFieldEnd()
        if self.no_comms_with_plc is not None:
            oprot.writeFieldBegin('no_comms_with_plc', TType.BOOL, 25)
            oprot.writeBool(self.no_comms_with_plc)
            oprot.writeFieldEnd()
        if self.at_position_setpoint is not None:
            oprot.writeFieldBegin('at_position_setpoint', TType.BOOL, 26)
            oprot.writeBool(self.at_position_setpoint)
            oprot.writeFieldEnd()
        if self.following is not None:
            oprot.writeFieldBegin('following', TType.BOOL, 27)
            oprot.writeBool(self.following)
            oprot.writeFieldEnd()
        if self.driver_moving is not None:
            oprot.writeFieldBegin('driver_moving', TType.BOOL, 28)
            oprot.writeBool(self.driver_moving)
            oprot.writeFieldEnd()
        if self.shutter_moving is not None:
            oprot.writeFieldBegin('shutter_moving', TType.BOOL, 29)
            oprot.writeBool(self.shutter_moving)
            oprot.writeFieldEnd()
        if self.slew_lights_on is not None:
            oprot.writeFieldBegin('slew_lights_on', TType.BOOL, 30)
            oprot.writeBool(self.slew_lights_on)
            oprot.writeFieldEnd()
        if self.dome_lights_on is not None:
            oprot.writeFieldBegin('dome_lights_on', TType.BOOL, 31)
            oprot.writeBool(self.dome_lights_on)
            oprot.writeFieldEnd()
        if self.position is not None:
            oprot.writeFieldBegin('position', TType.DOUBLE, 32)
            oprot.writeDouble(self.position)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FocuserStatus(object):
    """
    Attributes:
     - autofocus
     - comms_fault_servocommunicator
     - comms_fault_servocontroller
     - secondary_mirror_at_limit
     - secondary_mirror_auto
     - secondary_mirror_moving
     - secondary_mirror_position
     - tertiary_mirror_angle
     - tertiary_mirror_auto
     - tertiary_mirror_moving
     - tertiary_mirror_left_fork_position
     - tertiary_mirror_right_fork_position

    """


    def __init__(self, autofocus=None, comms_fault_servocommunicator=None, comms_fault_servocontroller=None, secondary_mirror_at_limit=None, secondary_mirror_auto=None, secondary_mirror_moving=None, secondary_mirror_position=None, tertiary_mirror_angle=None, tertiary_mirror_auto=None, tertiary_mirror_moving=None, tertiary_mirror_left_fork_position=None, tertiary_mirror_right_fork_position=None,):
        self.autofocus = autofocus
        self.comms_fault_servocommunicator = comms_fault_servocommunicator
        self.comms_fault_servocontroller = comms_fault_servocontroller
        self.secondary_mirror_at_limit = secondary_mirror_at_limit
        self.secondary_mirror_auto = secondary_mirror_auto
        self.secondary_mirror_moving = secondary_mirror_moving
        self.secondary_mirror_position = secondary_mirror_position
        self.tertiary_mirror_angle = tertiary_mirror_angle
        self.tertiary_mirror_auto = tertiary_mirror_auto
        self.tertiary_mirror_moving = tertiary_mirror_moving
        self.tertiary_mirror_left_fork_position = tertiary_mirror_left_fork_position
        self.tertiary_mirror_right_fork_position = tertiary_mirror_right_fork_position

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.autofocus = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.comms_fault_servocommunicator = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.comms_fault_servocontroller = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.secondary_mirror_at_limit = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.secondary_mirror_auto = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.secondary_mirror_moving = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.secondary_mirror_position = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.tertiary_mirror_angle = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.tertiary_mirror_auto = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.BOOL:
                    self.tertiary_mirror_moving = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.BOOL:
                    self.tertiary_mirror_left_fork_position = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.BOOL:
                    self.tertiary_mirror_right_fork_position = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FocuserStatus')
        if self.autofocus is not None:
            oprot.writeFieldBegin('autofocus', TType.BOOL, 1)
            oprot.writeBool(self.autofocus)
            oprot.writeFieldEnd()
        if self.comms_fault_servocommunicator is not None:
            oprot.writeFieldBegin('comms_fault_servocommunicator', TType.BOOL, 2)
            oprot.writeBool(self.comms_fault_servocommunicator)
            oprot.writeFieldEnd()
        if self.comms_fault_servocontroller is not None:
            oprot.writeFieldBegin('comms_fault_servocontroller', TType.BOOL, 3)
            oprot.writeBool(self.comms_fault_servocontroller)
            oprot.writeFieldEnd()
        if self.secondary_mirror_at_limit is not None:
            oprot.writeFieldBegin('secondary_mirror_at_limit', TType.BOOL, 4)
            oprot.writeBool(self.secondary_mirror_at_limit)
            oprot.writeFieldEnd()
        if self.secondary_mirror_auto is not None:
            oprot.writeFieldBegin('secondary_mirror_auto', TType.BOOL, 5)
            oprot.writeBool(self.secondary_mirror_auto)
            oprot.writeFieldEnd()
        if self.secondary_mirror_moving is not None:
            oprot.writeFieldBegin('secondary_mirror_moving', TType.BOOL, 6)
            oprot.writeBool(self.secondary_mirror_moving)
            oprot.writeFieldEnd()
        if self.secondary_mirror_position is not None:
            oprot.writeFieldBegin('secondary_mirror_position', TType.DOUBLE, 7)
            oprot.writeDouble(self.secondary_mirror_position)
            oprot.writeFieldEnd()
        if self.tertiary_mirror_angle is not None:
            oprot.writeFieldBegin('tertiary_mirror_angle', TType.DOUBLE, 8)
            oprot.writeDouble(self.tertiary_mirror_angle)
            oprot.writeFieldEnd()
        if self.tertiary_mirror_auto is not None:
            oprot.writeFieldBegin('tertiary_mirror_auto', TType.BOOL, 9)
            oprot.writeBool(self.tertiary_mirror_auto)
            oprot.writeFieldEnd()
        if self.tertiary_mirror_moving is not None:
            oprot.writeFieldBegin('tertiary_mirror_moving', TType.BOOL, 10)
            oprot.writeBool(self.tertiary_mirror_moving)
            oprot.writeFieldEnd()
        if self.tertiary_mirror_left_fork_position is not None:
            oprot.writeFieldBegin('tertiary_mirror_left_fork_position', TType.BOOL, 11)
            oprot.writeBool(self.tertiary_mirror_left_fork_position)
            oprot.writeFieldEnd()
        if self.tertiary_mirror_right_fork_position is not None:
            oprot.writeFieldBegin('tertiary_mirror_right_fork_position', TType.BOOL, 12)
            oprot.writeBool(self.tertiary_mirror_right_fork_position)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RotatorStatus(object):
    """
    Attributes:
     - moving
     - tracking
     - auto
     - at_limit
     - comms_fault_servocommunicator
     - comms_fault_servocontroller
     - moving_by_buttons
     - limit_min
     - limit_max
     - angle
     - parallactic_angle
     - parallactic_rate

    """


    def __init__(self, moving=None, tracking=None, auto=None, at_limit=None, comms_fault_servocommunicator=None, comms_fault_servocontroller=None, moving_by_buttons=None, limit_min=None, limit_max=None, angle=None, parallactic_angle=None, parallactic_rate=None,):
        self.moving = moving
        self.tracking = tracking
        self.auto = auto
        self.at_limit = at_limit
        self.comms_fault_servocommunicator = comms_fault_servocommunicator
        self.comms_fault_servocontroller = comms_fault_servocontroller
        self.moving_by_buttons = moving_by_buttons
        self.limit_min = limit_min
        self.limit_max = limit_max
        self.angle = angle
        self.parallactic_angle = parallactic_angle
        self.parallactic_rate = parallactic_rate

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.moving = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.tracking = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.auto = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.at_limit = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.comms_fault_servocommunicator = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.comms_fault_servocontroller = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.moving_by_buttons = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.limit_min = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.DOUBLE:
                    self.limit_max = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.DOUBLE:
                    self.angle = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.DOUBLE:
                    self.parallactic_angle = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.DOUBLE:
                    self.parallactic_rate = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RotatorStatus')
        if self.moving is not None:
            oprot.writeFieldBegin('moving', TType.BOOL, 1)
            oprot.writeBool(self.moving)
            oprot.writeFieldEnd()
        if self.tracking is not None:
            oprot.writeFieldBegin('tracking', TType.BOOL, 2)
            oprot.writeBool(self.tracking)
            oprot.writeFieldEnd()
        if self.auto is not None:
            oprot.writeFieldBegin('auto', TType.BOOL, 3)
            oprot.writeBool(self.auto)
            oprot.writeFieldEnd()
        if self.at_limit is not None:
            oprot.writeFieldBegin('at_limit', TType.BOOL, 4)
            oprot.writeBool(self.at_limit)
            oprot.writeFieldEnd()
        if self.comms_fault_servocommunicator is not None:
            oprot.writeFieldBegin('comms_fault_servocommunicator', TType.BOOL, 5)
            oprot.writeBool(self.comms_fault_servocommunicator)
            oprot.writeFieldEnd()
        if self.comms_fault_servocontroller is not None:
            oprot.writeFieldBegin('comms_fault_servocontroller', TType.BOOL, 6)
            oprot.writeBool(self.comms_fault_servocontroller)
            oprot.writeFieldEnd()
        if self.moving_by_buttons is not None:
            oprot.writeFieldBegin('moving_by_buttons', TType.BOOL, 7)
            oprot.writeBool(self.moving_by_buttons)
            oprot.writeFieldEnd()
        if self.limit_min is not None:
            oprot.writeFieldBegin('limit_min', TType.DOUBLE, 8)
            oprot.writeDouble(self.limit_min)
            oprot.writeFieldEnd()
        if self.limit_max is not None:
            oprot.writeFieldBegin('limit_max', TType.DOUBLE, 9)
            oprot.writeDouble(self.limit_max)
            oprot.writeFieldEnd()
        if self.angle is not None:
            oprot.writeFieldBegin('angle', TType.DOUBLE, 10)
            oprot.writeDouble(self.angle)
            oprot.writeFieldEnd()
        if self.parallactic_angle is not None:
            oprot.writeFieldBegin('parallactic_angle', TType.DOUBLE, 11)
            oprot.writeDouble(self.parallactic_angle)
            oprot.writeFieldEnd()
        if self.parallactic_rate is not None:
            oprot.writeFieldBegin('parallactic_rate', TType.DOUBLE, 12)
            oprot.writeDouble(self.parallactic_rate)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Status(object):
    """
    Attributes:
     - state
     - stopped
     - julian_date
     - airmass
     - zenith_distance
     - rotators
     - covers_moving
     - covers_open
     - dome_angle
     - dome_remote
     - dome_shutter_moving
     - dome_shutter_open
     - dome_tracking
     - dome_moving
     - dome_tcs_lockout
     - focus
     - secondary_mirror_auto
     - secondary_mirror_moving
     - tertiary_mirror_angle
     - tertiary_mirror_auto
     - tertiary_mirror_moving
     - instrument
     - slew_lights_on
     - dome_lights_on
     - telescope_auto
     - telescope_parked
     - telescope_alt
     - telescope_az
     - telescope_ra
     - telescope_dec
     - telescope_slewing
     - telescope_tracking
     - telescope_tracking_type
     - location

    """


    def __init__(self, state=None, stopped=None, julian_date=None, airmass=None, zenith_distance=None, rotators=None, covers_moving=None, covers_open=None, dome_angle=None, dome_remote=None, dome_shutter_moving=None, dome_shutter_open=None, dome_tracking=None, dome_moving=None, dome_tcs_lockout=None, focus=None, secondary_mirror_auto=None, secondary_mirror_moving=None, tertiary_mirror_angle=None, tertiary_mirror_auto=None, tertiary_mirror_moving=None, instrument=None, slew_lights_on=None, dome_lights_on=None, telescope_auto=None, telescope_parked=None, telescope_alt=None, telescope_az=None, telescope_ra=None, telescope_dec=None, telescope_slewing=None, telescope_tracking=None, telescope_tracking_type=None, location=None,):
        self.state = state
        self.stopped = stopped
        self.julian_date = julian_date
        self.airmass = airmass
        self.zenith_distance = zenith_distance
        self.rotators = rotators
        self.covers_moving = covers_moving
        self.covers_open = covers_open
        self.dome_angle = dome_angle
        self.dome_remote = dome_remote
        self.dome_shutter_moving = dome_shutter_moving
        self.dome_shutter_open = dome_shutter_open
        self.dome_tracking = dome_tracking
        self.dome_moving = dome_moving
        self.dome_tcs_lockout = dome_tcs_lockout
        self.focus = focus
        self.secondary_mirror_auto = secondary_mirror_auto
        self.secondary_mirror_moving = secondary_mirror_moving
        self.tertiary_mirror_angle = tertiary_mirror_angle
        self.tertiary_mirror_auto = tertiary_mirror_auto
        self.tertiary_mirror_moving = tertiary_mirror_moving
        self.instrument = instrument
        self.slew_lights_on = slew_lights_on
        self.dome_lights_on = dome_lights_on
        self.telescope_auto = telescope_auto
        self.telescope_parked = telescope_parked
        self.telescope_alt = telescope_alt
        self.telescope_az = telescope_az
        self.telescope_ra = telescope_ra
        self.telescope_dec = telescope_dec
        self.telescope_slewing = telescope_slewing
        self.telescope_tracking = telescope_tracking
        self.telescope_tracking_type = telescope_tracking_type
        self.location = location

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.state = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.stopped = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.julian_date = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.airmass = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.zenith_distance = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.MAP:
                    self.rotators = {}
                    (_ktype1, _vtype2, _size0) = iprot.readMapBegin()
                    for _i4 in range(_size0):
                        _key5 = iprot.readI32()
                        _val6 = RotatorStatus()
                        _val6.read(iprot)
                        self.rotators[_key5] = _val6
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.covers_moving = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.covers_open = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.DOUBLE:
                    self.dome_angle = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.BOOL:
                    self.dome_remote = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.BOOL:
                    self.dome_shutter_moving = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.BOOL:
                    self.dome_shutter_open = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.BOOL:
                    self.dome_tracking = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.BOOL:
                    self.dome_moving = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.BOOL:
                    self.dome_tcs_lockout = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.DOUBLE:
                    self.focus = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.BOOL:
                    self.secondary_mirror_auto = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.BOOL:
                    self.secondary_mirror_moving = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.DOUBLE:
                    self.tertiary_mirror_angle = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.BOOL:
                    self.tertiary_mirror_auto = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.BOOL:
                    self.tertiary_mirror_moving = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.I32:
                    self.instrument = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.BOOL:
                    self.slew_lights_on = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.BOOL:
                    self.dome_lights_on = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.BOOL:
                    self.telescope_auto = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.BOOL:
                    self.telescope_parked = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.DOUBLE:
                    self.telescope_alt = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.DOUBLE:
                    self.telescope_az = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.DOUBLE:
                    self.telescope_ra = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.DOUBLE:
                    self.telescope_dec = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.BOOL:
                    self.telescope_slewing = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.BOOL:
                    self.telescope_tracking = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.I32:
                    self.telescope_tracking_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 34:
                if ftype == TType.STRUCT:
                    self.location = Location()
                    self.location.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Status')
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.I32, 1)
            oprot.writeI32(self.state)
            oprot.writeFieldEnd()
        if self.stopped is not None:
            oprot.writeFieldBegin('stopped', TType.BOOL, 2)
            oprot.writeBool(self.stopped)
            oprot.writeFieldEnd()
        if self.julian_date is not None:
            oprot.writeFieldBegin('julian_date', TType.DOUBLE, 3)
            oprot.writeDouble(self.julian_date)
            oprot.writeFieldEnd()
        if self.airmass is not None:
            oprot.writeFieldBegin('airmass', TType.DOUBLE, 4)
            oprot.writeDouble(self.airmass)
            oprot.writeFieldEnd()
        if self.zenith_distance is not None:
            oprot.writeFieldBegin('zenith_distance', TType.DOUBLE, 5)
            oprot.writeDouble(self.zenith_distance)
            oprot.writeFieldEnd()
        if self.rotators is not None:
            oprot.writeFieldBegin('rotators', TType.MAP, 6)
            oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.rotators))
            for kiter7, viter8 in self.rotators.items():
                oprot.writeI32(kiter7)
                viter8.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.covers_moving is not None:
            oprot.writeFieldBegin('covers_moving', TType.BOOL, 7)
            oprot.writeBool(self.covers_moving)
            oprot.writeFieldEnd()
        if self.covers_open is not None:
            oprot.writeFieldBegin('covers_open', TType.BOOL, 8)
            oprot.writeBool(self.covers_open)
            oprot.writeFieldEnd()
        if self.dome_angle is not None:
            oprot.writeFieldBegin('dome_angle', TType.DOUBLE, 9)
            oprot.writeDouble(self.dome_angle)
            oprot.writeFieldEnd()
        if self.dome_remote is not None:
            oprot.writeFieldBegin('dome_remote', TType.BOOL, 10)
            oprot.writeBool(self.dome_remote)
            oprot.writeFieldEnd()
        if self.dome_shutter_moving is not None:
            oprot.writeFieldBegin('dome_shutter_moving', TType.BOOL, 11)
            oprot.writeBool(self.dome_shutter_moving)
            oprot.writeFieldEnd()
        if self.dome_shutter_open is not None:
            oprot.writeFieldBegin('dome_shutter_open', TType.BOOL, 12)
            oprot.writeBool(self.dome_shutter_open)
            oprot.writeFieldEnd()
        if self.dome_tracking is not None:
            oprot.writeFieldBegin('dome_tracking', TType.BOOL, 13)
            oprot.writeBool(self.dome_tracking)
            oprot.writeFieldEnd()
        if self.dome_moving is not None:
            oprot.writeFieldBegin('dome_moving', TType.BOOL, 14)
            oprot.writeBool(self.dome_moving)
            oprot.writeFieldEnd()
        if self.dome_tcs_lockout is not None:
            oprot.writeFieldBegin('dome_tcs_lockout', TType.BOOL, 15)
            oprot.writeBool(self.dome_tcs_lockout)
            oprot.writeFieldEnd()
        if self.focus is not None:
            oprot.writeFieldBegin('focus', TType.DOUBLE, 16)
            oprot.writeDouble(self.focus)
            oprot.writeFieldEnd()
        if self.secondary_mirror_auto is not None:
            oprot.writeFieldBegin('secondary_mirror_auto', TType.BOOL, 17)
            oprot.writeBool(self.secondary_mirror_auto)
            oprot.writeFieldEnd()
        if self.secondary_mirror_moving is not None:
            oprot.writeFieldBegin('secondary_mirror_moving', TType.BOOL, 18)
            oprot.writeBool(self.secondary_mirror_moving)
            oprot.writeFieldEnd()
        if self.tertiary_mirror_angle is not None:
            oprot.writeFieldBegin('tertiary_mirror_angle', TType.DOUBLE, 19)
            oprot.writeDouble(self.tertiary_mirror_angle)
            oprot.writeFieldEnd()
        if self.tertiary_mirror_auto is not None:
            oprot.writeFieldBegin('tertiary_mirror_auto', TType.BOOL, 20)
            oprot.writeBool(self.tertiary_mirror_auto)
            oprot.writeFieldEnd()
        if self.tertiary_mirror_moving is not None:
            oprot.writeFieldBegin('tertiary_mirror_moving', TType.BOOL, 21)
            oprot.writeBool(self.tertiary_mirror_moving)
            oprot.writeFieldEnd()
        if self.instrument is not None:
            oprot.writeFieldBegin('instrument', TType.I32, 22)
            oprot.writeI32(self.instrument)
            oprot.writeFieldEnd()
        if self.slew_lights_on is not None:
            oprot.writeFieldBegin('slew_lights_on', TType.BOOL, 23)
            oprot.writeBool(self.slew_lights_on)
            oprot.writeFieldEnd()
        if self.dome_lights_on is not None:
            oprot.writeFieldBegin('dome_lights_on', TType.BOOL, 24)
            oprot.writeBool(self.dome_lights_on)
            oprot.writeFieldEnd()
        if self.telescope_auto is not None:
            oprot.writeFieldBegin('telescope_auto', TType.BOOL, 25)
            oprot.writeBool(self.telescope_auto)
            oprot.writeFieldEnd()
        if self.telescope_parked is not None:
            oprot.writeFieldBegin('telescope_parked', TType.BOOL, 26)
            oprot.writeBool(self.telescope_parked)
            oprot.writeFieldEnd()
        if self.telescope_alt is not None:
            oprot.writeFieldBegin('telescope_alt', TType.DOUBLE, 27)
            oprot.writeDouble(self.telescope_alt)
            oprot.writeFieldEnd()
        if self.telescope_az is not None:
            oprot.writeFieldBegin('telescope_az', TType.DOUBLE, 28)
            oprot.writeDouble(self.telescope_az)
            oprot.writeFieldEnd()
        if self.telescope_ra is not None:
            oprot.writeFieldBegin('telescope_ra', TType.DOUBLE, 29)
            oprot.writeDouble(self.telescope_ra)
            oprot.writeFieldEnd()
        if self.telescope_dec is not None:
            oprot.writeFieldBegin('telescope_dec', TType.DOUBLE, 30)
            oprot.writeDouble(self.telescope_dec)
            oprot.writeFieldEnd()
        if self.telescope_slewing is not None:
            oprot.writeFieldBegin('telescope_slewing', TType.BOOL, 31)
            oprot.writeBool(self.telescope_slewing)
            oprot.writeFieldEnd()
        if self.telescope_tracking is not None:
            oprot.writeFieldBegin('telescope_tracking', TType.BOOL, 32)
            oprot.writeBool(self.telescope_tracking)
            oprot.writeFieldEnd()
        if self.telescope_tracking_type is not None:
            oprot.writeFieldBegin('telescope_tracking_type', TType.I32, 33)
            oprot.writeI32(self.telescope_tracking_type)
            oprot.writeFieldEnd()
        if self.location is not None:
            oprot.writeFieldBegin('location', TType.STRUCT, 34)
            self.location.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(LesediException)
LesediException.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
)
all_structs.append(FitsInfoType)
FitsInfoType.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'key', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'val', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'comment', 'UTF8', None, ),  # 3
)
all_structs.append(Location)
Location.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'latitude', None, None, ),  # 1
    (2, TType.DOUBLE, 'longitude', None, None, ),  # 2
    (3, TType.DOUBLE, 'elevation', None, None, ),  # 3
)
all_structs.append(TelescopeStatus)
TelescopeStatus.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'initialized', None, None, ),  # 1
    (2, TType.BOOL, 'tracking', None, None, ),  # 2
    (3, TType.BOOL, 'slewing', None, None, ),  # 3
    (4, TType.BOOL, 'parking', None, None, ),  # 4
    (5, TType.BOOL, 'parked', None, None, ),  # 5
    (6, TType.BOOL, 'pointing_east', None, None, ),  # 6
    (7, TType.BOOL, 'manual', None, None, ),  # 7
    (8, TType.BOOL, 'communication_fault', None, None, ),  # 8
    (9, TType.BOOL, 'limit_switch_primary_plus', None, None, ),  # 9
    (10, TType.BOOL, 'limit_switch_primary_minus', None, None, ),  # 10
    (11, TType.BOOL, 'limit_switch_secondary_plus', None, None, ),  # 11
    (12, TType.BOOL, 'limit_switch_secondary_minus', None, None, ),  # 12
    (13, TType.BOOL, 'homing_switch_primary_axis', None, None, ),  # 13
    (14, TType.BOOL, 'homing_switch_secondary_axis', None, None, ),  # 14
    (15, TType.BOOL, 'goto_commanded_rotator_position', None, None, ),  # 15
    (16, TType.BOOL, 'non_sidereal_tracking', None, None, ),  # 16
    (17, TType.DOUBLE, 'ra', None, None, ),  # 17
    (18, TType.DOUBLE, 'dec', None, None, ),  # 18
    (19, TType.DOUBLE, 'alt', None, None, ),  # 19
    (20, TType.DOUBLE, 'az', None, None, ),  # 20
    (21, TType.DOUBLE, 'secondary_axis_angle', None, None, ),  # 21
    (22, TType.DOUBLE, 'primary_axis_angle', None, None, ),  # 22
    (23, TType.DOUBLE, 'sidereal_time', None, None, ),  # 23
    (24, TType.DOUBLE, 'julian_date', None, None, ),  # 24
    (25, TType.DOUBLE, 'time', None, None, ),  # 25
    (26, TType.DOUBLE, 'airmass', None, None, ),  # 26
    (27, TType.STRUCT, 'location', [Location, None], None, ),  # 27
)
all_structs.append(DomeStatus)
DomeStatus.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'shutter_closed', None, None, ),  # 1
    (2, TType.BOOL, 'shutter_opened', None, None, ),  # 2
    (3, TType.BOOL, 'shutter_motor_on', None, None, ),  # 3
    (4, TType.BOOL, 'shutter_fault', None, None, ),  # 4
    (5, TType.BOOL, 'moving', None, None, ),  # 5
    (6, TType.BOOL, 'rotation_fault', None, None, ),  # 6
    (7, TType.BOOL, 'lights_on', None, None, ),  # 7
    (8, TType.BOOL, 'lights_manual', None, None, ),  # 8
    (9, TType.BOOL, 'shutter_opening_manually', None, None, ),  # 9
    (10, TType.BOOL, 'shutter_closing_manually', None, None, ),  # 10
    (11, TType.BOOL, 'moving_right_manually', None, None, ),  # 11
    (12, TType.BOOL, 'moving_left_manually', None, None, ),  # 12
    (13, TType.BOOL, 'shutter_power', None, None, ),  # 13
    (14, TType.BOOL, 'power', None, None, ),  # 14
    (15, TType.BOOL, 'remote', None, None, ),  # 15
    (16, TType.BOOL, 'is_raining', None, None, ),  # 16
    (17, TType.BOOL, 'tcs_locked_out', None, None, ),  # 17
    (18, TType.BOOL, 'emergency_stop', None, None, ),  # 18
    (19, TType.BOOL, 'shutter_closed_rain', None, None, ),  # 19
    (20, TType.BOOL, 'power_failure', None, None, ),  # 20
    (21, TType.BOOL, 'shutter_closed_power_failure', None, None, ),  # 21
    (22, TType.BOOL, 'watchdog_tripped', None, None, ),  # 22
    (23, TType.BOOL, 'no_comms_with_servocontroller', None, None, ),  # 23
    (24, TType.BOOL, 'no_comms_with_sitechexe', None, None, ),  # 24
    (25, TType.BOOL, 'no_comms_with_plc', None, None, ),  # 25
    (26, TType.BOOL, 'at_position_setpoint', None, None, ),  # 26
    (27, TType.BOOL, 'following', None, None, ),  # 27
    (28, TType.BOOL, 'driver_moving', None, None, ),  # 28
    (29, TType.BOOL, 'shutter_moving', None, None, ),  # 29
    (30, TType.BOOL, 'slew_lights_on', None, None, ),  # 30
    (31, TType.BOOL, 'dome_lights_on', None, None, ),  # 31
    (32, TType.DOUBLE, 'position', None, None, ),  # 32
)
all_structs.append(FocuserStatus)
FocuserStatus.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'autofocus', None, None, ),  # 1
    (2, TType.BOOL, 'comms_fault_servocommunicator', None, None, ),  # 2
    (3, TType.BOOL, 'comms_fault_servocontroller', None, None, ),  # 3
    (4, TType.BOOL, 'secondary_mirror_at_limit', None, None, ),  # 4
    (5, TType.BOOL, 'secondary_mirror_auto', None, None, ),  # 5
    (6, TType.BOOL, 'secondary_mirror_moving', None, None, ),  # 6
    (7, TType.DOUBLE, 'secondary_mirror_position', None, None, ),  # 7
    (8, TType.DOUBLE, 'tertiary_mirror_angle', None, None, ),  # 8
    (9, TType.BOOL, 'tertiary_mirror_auto', None, None, ),  # 9
    (10, TType.BOOL, 'tertiary_mirror_moving', None, None, ),  # 10
    (11, TType.BOOL, 'tertiary_mirror_left_fork_position', None, None, ),  # 11
    (12, TType.BOOL, 'tertiary_mirror_right_fork_position', None, None, ),  # 12
)
all_structs.append(RotatorStatus)
RotatorStatus.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'moving', None, None, ),  # 1
    (2, TType.BOOL, 'tracking', None, None, ),  # 2
    (3, TType.BOOL, 'auto', None, None, ),  # 3
    (4, TType.BOOL, 'at_limit', None, None, ),  # 4
    (5, TType.BOOL, 'comms_fault_servocommunicator', None, None, ),  # 5
    (6, TType.BOOL, 'comms_fault_servocontroller', None, None, ),  # 6
    (7, TType.BOOL, 'moving_by_buttons', None, None, ),  # 7
    (8, TType.DOUBLE, 'limit_min', None, None, ),  # 8
    (9, TType.DOUBLE, 'limit_max', None, None, ),  # 9
    (10, TType.DOUBLE, 'angle', None, None, ),  # 10
    (11, TType.DOUBLE, 'parallactic_angle', None, None, ),  # 11
    (12, TType.DOUBLE, 'parallactic_rate', None, None, ),  # 12
)
all_structs.append(Status)
Status.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'state', None, None, ),  # 1
    (2, TType.BOOL, 'stopped', None, None, ),  # 2
    (3, TType.DOUBLE, 'julian_date', None, None, ),  # 3
    (4, TType.DOUBLE, 'airmass', None, None, ),  # 4
    (5, TType.DOUBLE, 'zenith_distance', None, None, ),  # 5
    (6, TType.MAP, 'rotators', (TType.I32, None, TType.STRUCT, [RotatorStatus, None], False), None, ),  # 6
    (7, TType.BOOL, 'covers_moving', None, None, ),  # 7
    (8, TType.BOOL, 'covers_open', None, None, ),  # 8
    (9, TType.DOUBLE, 'dome_angle', None, None, ),  # 9
    (10, TType.BOOL, 'dome_remote', None, None, ),  # 10
    (11, TType.BOOL, 'dome_shutter_moving', None, None, ),  # 11
    (12, TType.BOOL, 'dome_shutter_open', None, None, ),  # 12
    (13, TType.BOOL, 'dome_tracking', None, None, ),  # 13
    (14, TType.BOOL, 'dome_moving', None, None, ),  # 14
    (15, TType.BOOL, 'dome_tcs_lockout', None, None, ),  # 15
    (16, TType.DOUBLE, 'focus', None, None, ),  # 16
    (17, TType.BOOL, 'secondary_mirror_auto', None, None, ),  # 17
    (18, TType.BOOL, 'secondary_mirror_moving', None, None, ),  # 18
    (19, TType.DOUBLE, 'tertiary_mirror_angle', None, None, ),  # 19
    (20, TType.BOOL, 'tertiary_mirror_auto', None, None, ),  # 20
    (21, TType.BOOL, 'tertiary_mirror_moving', None, None, ),  # 21
    (22, TType.I32, 'instrument', None, None, ),  # 22
    (23, TType.BOOL, 'slew_lights_on', None, None, ),  # 23
    (24, TType.BOOL, 'dome_lights_on', None, None, ),  # 24
    (25, TType.BOOL, 'telescope_auto', None, None, ),  # 25
    (26, TType.BOOL, 'telescope_parked', None, None, ),  # 26
    (27, TType.DOUBLE, 'telescope_alt', None, None, ),  # 27
    (28, TType.DOUBLE, 'telescope_az', None, None, ),  # 28
    (29, TType.DOUBLE, 'telescope_ra', None, None, ),  # 29
    (30, TType.DOUBLE, 'telescope_dec', None, None, ),  # 30
    (31, TType.BOOL, 'telescope_slewing', None, None, ),  # 31
    (32, TType.BOOL, 'telescope_tracking', None, None, ),  # 32
    (33, TType.I32, 'telescope_tracking_type', None, None, ),  # 33
    (34, TType.STRUCT, 'location', [Location, None], None, ),  # 34
)
fix_spec(all_structs)
del all_structs
